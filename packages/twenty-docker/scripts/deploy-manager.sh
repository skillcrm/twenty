#!/bin/bash

# –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Kubernetes
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy-manager.sh [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE} $1${NC}"
    echo -e "${PURPLE}================================${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
check_script_location() {
    if [[ ! -f "local-deploy.sh" ]]; then
        print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ scripts/"
        exit 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
show_menu() {
    print_header "–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è SkillCRM"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo ""
    echo "  üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ:"
    echo "    deploy [stage|prod] [tag]     - –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π"
    echo "    quick [stage|prod]            - –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–≥–∞"
    echo ""
    echo "  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "    status [stage|prod] [--logs]  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo "    logs [stage|prod]             - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo ""
    echo "  üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "    rollback [stage|prod] [version] - –û—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏"
    echo "    cleanup [stage|prod] [--force]  - –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"
    echo ""
    echo "  üõ†Ô∏è  –£—Ç–∏–ª–∏—Ç—ã:"
    echo "    build [stage|prod] [tag]      - –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞"
    echo "    health [stage|prod]           - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
    echo ""
    echo "  ‚ùì –ü–æ–º–æ—â—å:"
    echo "    help                          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "    help [–∫–æ–º–∞–Ω–¥–∞]                - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
    echo ""
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ
show_command_help() {
    local command=$1
    
    case "$command" in
        "deploy")
            echo "–ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π –≤ Kubernetes"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: deploy [stage|prod] [tag]"
            echo ""
            echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
            echo "  stage    –î–µ–ø–ª–æ–π –≤ stage —Å—Ä–µ–¥—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  prod     –î–µ–ø–ª–æ–π –≤ production —Å—Ä–µ–¥—É"
            echo "  tag      –¢–µ–≥ –æ–±—Ä–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: latest)"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  deploy stage                    # –î–µ–ø–ª–æ–π stage —Å —Ç–µ–≥–æ–º latest"
            echo "  deploy prod v1.2.3             # –î–µ–ø–ª–æ–π prod —Å —Ç–µ–≥–æ–º v1.2.3"
            echo ""
            echo "–ü—Ä–æ—Ü–µ—Å—Å:"
            echo "  1. –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"
            echo "  2. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ registry"
            echo "  3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ deployment"
            echo "  4. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"
            echo "  5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
            ;;
        "quick")
            echo "–ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–≥–∞"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: quick [stage|prod]"
            echo ""
            echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
            echo "  stage    –î–µ–ø–ª–æ–π –≤ stage —Å—Ä–µ–¥—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  prod     –î–µ–ø–ª–æ–π –≤ production —Å—Ä–µ–¥—É"
            echo ""
            echo "–¢–µ–≥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:"
            echo "  {environment}-{timestamp}-{branch}-{commit}"
            ;;
        "status")
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: status [stage|prod] [--logs]"
            echo ""
            echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
            echo "  stage    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å stage —Å—Ä–µ–¥—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  prod     –ü—Ä–æ–≤–µ—Ä–∏—Ç—å production —Å—Ä–µ–¥—É"
            echo "  --logs   –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
            ;;
        "rollback")
            echo "–û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: rollback [stage|prod] [version]"
            echo ""
            echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
            echo "  stage    –û—Ç–∫–∞—Ç –≤ stage —Å—Ä–µ–¥—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  prod     –û—Ç–∫–∞—Ç –≤ production —Å—Ä–µ–¥—É"
            echo "  version  –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            ;;
        "cleanup")
            echo "–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: cleanup [stage|prod] [--force]"
            echo ""
            echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
            echo "  stage    –û—á–∏—Å—Ç–∫–∞ stage —Å—Ä–µ–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  prod     –û—á–∏—Å—Ç–∫–∞ production —Å—Ä–µ–¥—ã"
            echo "  --force  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
            ;;
    esac
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã deploy
cmd_deploy() {
    local environment=${1:-stage}
    local tag=${2:-latest}
    
    print_header "–ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π –≤ $environment"
    ./local-deploy.sh "$environment" "$tag"
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã quick
cmd_quick() {
    local environment=${1:-stage}
    
    print_header "–ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π –≤ $environment"
    ./quick-deploy.sh "$environment"
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã status
cmd_status() {
    local environment=${1:-stage}
    local logs_flag=$2
    
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ $environment"
    ./status.sh "$environment" "$logs_flag"
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã rollback
cmd_rollback() {
    local environment=${1:-stage}
    local version=$2
    
    print_header "–û—Ç–∫–∞—Ç $environment"
    ./rollback.sh "$environment" "" "$version"
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã cleanup
cmd_cleanup() {
    local environment=${1:-stage}
    local force_flag=$2
    
    print_header "–û—á–∏—Å—Ç–∫–∞ $environment"
    ./cleanup.sh "$environment" "$force_flag"
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã build
cmd_build() {
    local environment=${1:-stage}
    local tag=${2:-latest}
    
    print_header "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –¥–ª—è $environment"
    
    # –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞, –±–µ–∑ –¥–µ–ø–ª–æ—è
    local registry="skillcrm-register.registry.twcstorage.ru"
    local image_name="twenty"
    local full_image="$registry/$image_name:$tag"
    
    print_status "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    if ! docker build -t "$full_image" -f ../twenty/Dockerfile ..; then
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
    
    print_status "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ registry..."
    if ! docker push "$full_image"; then
        print_error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
    
    print_success "–û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: $full_image"
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã health
cmd_health() {
    local environment=${1:-stage}
    
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è $environment"
    
    local namespace="twentycrm${environment:+-$environment}"
    local service_name="twentycrm${environment:+-$environment}-server"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É
    if ! kubectl cluster-info &> /dev/null; then
        print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    if ! kubectl get service "$service_name" -n "$namespace" &> /dev/null; then
        print_error "–°–µ—Ä–≤–∏—Å $service_name –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ namespace $namespace"
        exit 1
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞
    local service_port=$(kubectl get service "$service_name" -n "$namespace" -o jsonpath='{.spec.ports[0].port}')
    
    # –ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print_status "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–±—Ä–æ—Å–∞ –ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è..."
    kubectl port-forward service/"$service_name" 8080:"$service_port" -n "$namespace" &
    local port_forward_pid=$!
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±—Ä–æ—Å–∞
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    local health_url="http://localhost:8080/health"
    if curl -s -f "$health_url" > /dev/null 2>&1; then
        print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ"
    else
        print_error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è"
        kill $port_forward_pid 2>/dev/null || true
        exit 1
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±—Ä–æ—Å–∞ –ø–æ—Ä—Ç–∞
    kill $port_forward_pid 2>/dev/null || true
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã logs
cmd_logs() {
    local environment=${1:-stage}
    
    print_header "–õ–æ–≥–∏ $environment"
    
    local namespace="twentycrm${environment:+-$environment}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É
    if ! kubectl cluster-info &> /dev/null; then
        print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É"
        exit 1
    fi
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
    local pods=$(kubectl get pods -n "$namespace" -o jsonpath='{.items[*].metadata.name}')
    for pod in $pods; do
        print_status "–õ–æ–≥–∏ Pod: $pod"
        echo "----------------------------------------"
        kubectl logs "$pod" -n "$namespace" --tail=100 || true
        echo ""
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command=${1:-help}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    check_script_location
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    case "$command" in
        "deploy")
            cmd_deploy "$2" "$3"
            ;;
        "quick")
            cmd_quick "$2"
            ;;
        "status")
            cmd_status "$2" "$3"
            ;;
        "rollback")
            cmd_rollback "$2" "$3"
            ;;
        "cleanup")
            cmd_cleanup "$2" "$3"
            ;;
        "build")
            cmd_build "$2" "$3"
            ;;
        "health")
            cmd_health "$2"
            ;;
        "logs")
            cmd_logs "$2"
            ;;
        "help")
            if [[ -n "$2" ]]; then
                show_command_help "$2"
            else
                show_menu
            fi
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            echo ""
            show_menu
            exit 1
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'print_error "–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"
