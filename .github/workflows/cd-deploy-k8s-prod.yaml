name: Deploy to Kubernetes Production Environment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: skillcrm-register.registry.twcstorage.ru
  DOCKER_IMAGE_NAME: twenty
  ENVIRONMENT: production
  DOMAIN: skillcrm.ru

jobs:
  pre-deployment-checks:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if deployment is allowed
        run: |
          # Check if this is a tagged release or main branch
          if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "❌ Production deployment is only allowed from main branch or manual trigger"
            exit 1
          fi
          echo "✅ Deployment is allowed"

      - name: Run security checks
        run: |
          echo "Running security checks..."
          # Add security checks here if needed
          echo "✅ Security checks passed"

  build-and-deploy:
    needs: pre-deployment-checks
    timeout-minutes: 45
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug Registry Info
        run: |
          echo "Registry: ${{ env.DOCKER_REGISTRY }}"
          echo "Username: ${{ secrets.DOCKER_REGISTRY_USER }}"
          echo "Token length: ${#DOCKER_REGISTRY_TOKEN}"
          echo "Token starts with: ${DOCKER_REGISTRY_TOKEN:0:20}..."

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=prod

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/twenty-docker/twenty/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            REACT_APP_SERVER_BASE_URL=https://${{ env.DOMAIN }}
            APP_VERSION=${{ github.sha }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          yc --version

      - name: Configure Yandex Cloud auth
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          if [ -z "$YC_SA_KEY_JSON" ] || [ -z "$YC_CLOUD_ID" ] || [ -z "$YC_FOLDER_ID" ]; then
            echo "YC credentials are not provided via secrets (YC_SA_KEY_JSON/YC_CLOUD_ID/YC_FOLDER_ID)." >&2
            echo "If your kubeconfig uses 'exec' with yc, these are required." >&2
          else
            echo "$YC_SA_KEY_JSON" > sa-key.json
            yc config profile create ci-profile || true
            yc config profile activate ci-profile
            yc config set service-account-key sa-key.json
            yc config set cloud-id "$YC_CLOUD_ID"
            yc config set folder-id "$YC_FOLDER_ID"
            yc config list
            echo "YC_PROFILE=ci-profile" >> $GITHUB_ENV
          fi

      - name: Create backup before deployment
        run: |
          cd packages/twenty-docker/k8s
          kubectl get deployment twentycrm-server -n twentycrm -o yaml > backup-deployment-$(date +%Y%m%d_%H%M%S).yaml || true

      - name: Configure kubectl
        run: |
          # Configure kubectl for your Kubernetes cluster
          mkdir -p ~/.kube
          # Prefer static kubeconfig if provided
          if [ -n "${{ secrets.KUBE_SERVER }}" ] && [ -n "${{ secrets.KUBE_CA_DATA }}" ] && [ -n "${{ secrets.KUBE_BEARER_TOKEN }}" ]; then
            cat > ~/.kube/config <<EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority-data: ${KUBE_CA_DATA}
    server: ${KUBE_SERVER}
  name: yc-cluster
contexts:
- context:
    cluster: yc-cluster
    user: sa-user
  name: yc-context
current-context: yc-context
users:
- name: sa-user
  user:
    token: ${KUBE_BEARER_TOKEN}
EOF
            chmod 600 ~/.kube/config
            kubectl cluster-info
            exit 0
          fi
          tmpcfg="$(mktemp)"
          printf "%s" "${{ secrets.KUBECONFIG }}" > "$tmpcfg"
          if base64 -d "$tmpcfg" > "$tmpcfg.dec" 2>/dev/null; then
            if head -n1 "$tmpcfg.dec" | grep -Eq '^(apiVersion:|\{)'; then
              mv "$tmpcfg.dec" ~/.kube/config
            else
              rm -f "$tmpcfg.dec"
            fi
          fi
          if [ ! -f ~/.kube/config ]; then
            printf "%b" "$(cat "$tmpcfg")" > ~/.kube/config
          fi
          rm -f "$tmpcfg"
          chmod 600 ~/.kube/config
          if grep -q "exec:" -n ~/.kube/config; then
            sed -i 's|/Users/.*/yandex-cloud/bin/yc|yc|g' ~/.kube/config || true
            sed -i 's|/home/.*/yandex-cloud/bin/yc|yc|g' ~/.kube/config || true
          fi
          kubectl cluster-info

      - name: Deploy to Kubernetes Production
        run: |
          cd packages/twenty-docker/k8s
          export DOCKER_REGISTRY_USER=${{ secrets.DOCKER_REGISTRY_USER }}
          export DOCKER_REGISTRY_TOKEN=${{ secrets.DOCKER_REGISTRY_TOKEN }}
          export IMAGE_TAG=${{ steps.meta.outputs.tags }}
          ./deploy.sh prod ${{ steps.meta.outputs.tags }}

      - name: Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 90
          for i in {1..15}; do
            if curl -f https://${{ env.DOMAIN }}/healthz; then
              echo "✅ Production deployment successful!"
              exit 0
            fi
            echo "Waiting for health check... ($i/15)"
            sleep 30
          done
          echo "❌ Health check failed - rolling back"
          exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          cd packages/twenty-docker/k8s
          echo "Rolling back to previous version..."
          ./deploy.sh rollback prod

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Kubernetes Production deployment ${{ job.status }}!
            Environment: ${{ env.ENVIRONMENT }}
            Domain: https://${{ env.DOMAIN }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
