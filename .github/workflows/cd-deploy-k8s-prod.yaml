name: Deploy to Kubernetes Production Environment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: skillcrm-register.registry.twcstorage.ru
  DOCKER_IMAGE_NAME: twenty
  ENVIRONMENT: production
  DOMAIN: skillcrm.ru

jobs:
  pre-deployment-checks:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if deployment is allowed
        run: |
          # Check if this is a tagged release or main branch
          if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "‚ùå Production deployment is only allowed from main branch or manual trigger"
            exit 1
          fi
          echo "‚úÖ Deployment is allowed"

      - name: Run security checks
        run: |
          echo "Running security checks..."
          # Add security checks here if needed
          echo "‚úÖ Security checks passed"

  build-and-deploy:
    needs: pre-deployment-checks
    timeout-minutes: 45
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug Registry Info
        run: |
          echo "Registry: ${{ env.DOCKER_REGISTRY }}"
          echo "Username: ${{ secrets.DOCKER_REGISTRY_USER }}"
          echo "Token length: ${#DOCKER_REGISTRY_TOKEN}"
          echo "Token starts with: ${DOCKER_REGISTRY_TOKEN:0:20}..."

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=prod

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/twenty-docker/twenty/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            REACT_APP_SERVER_BASE_URL=https://${{ env.DOMAIN }}
            APP_VERSION=${{ github.sha }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          # Force yc to use ci-profile by default via wrapper
          mkdir -p "$HOME/.local/bin"
          echo '#!/usr/bin/env bash' > "$HOME/.local/bin/yc"
          echo 'exec "$HOME/yandex-cloud/bin/yc" --profile ci-profile "$@"' >> "$HOME/.local/bin/yc"
          chmod +x "$HOME/.local/bin/yc"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"
          yc --version

      - name: Configure Yandex Cloud auth
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          if [ -z "$YC_SA_KEY_JSON" ] || [ -z "$YC_CLOUD_ID" ] || [ -z "$YC_FOLDER_ID" ]; then
            echo "YC credentials are not provided via secrets (YC_SA_KEY_JSON/YC_CLOUD_ID/YC_FOLDER_ID)." >&2
            echo "If your kubeconfig uses 'exec' with yc, these are required." >&2
          else
            echo "$YC_SA_KEY_JSON" > sa-key.json
            yc config profile create ci-profile || true
            yc config profile activate ci-profile
            yc config set service-account-key sa-key.json
            yc config set cloud-id "$YC_CLOUD_ID"
            yc config set folder-id "$YC_FOLDER_ID"
            # Create default profile for kubeconfig exec compatibility
            yc config profile create default || true
            yc config profile activate default
            yc config set service-account-key sa-key.json
            yc config set cloud-id "$YC_CLOUD_ID"
            yc config set folder-id "$YC_FOLDER_ID"
            yc config list
          fi

      - name: Create backup before deployment
        run: |
          cd packages/twenty-docker/k8s
          kubectl get deployment twentycrm-server -n twentycrm -o yaml > backup-deployment-$(date +%Y%m%d_%H%M%S).yaml || true

      - name: Debug Kubernetes credentials (no secrets)
        run: |
          echo "KUBE_SERVER set (secret or var): $([[ -n \"${{ secrets.KUBE_SERVER }}\" || -n \"${{ vars.KUBE_SERVER }}\" ]] && echo yes || echo no)"
          echo "KUBE_CA_DATA set (secret or var): $([[ -n \"${{ secrets.KUBE_CA_DATA }}\" || -n \"${{ vars.KUBE_CA_DATA }}\" ]] && echo yes || echo no)"
          echo "KUBE_BEARER_TOKEN set (secret or var): $([[ -n \"${{ secrets.KUBE_BEARER_TOKEN }}\" || -n \"${{ vars.KUBE_BEARER_TOKEN }}\" ]] && echo yes || echo no)"

      - name: Configure kubectl (Static Configuration)
        id: configure-kubectl
        env:
          KUBE_SERVER: ${{ secrets.KUBE_SERVER != '' && secrets.KUBE_SERVER || vars.KUBE_SERVER }}
          KUBE_CA_DATA: ${{ secrets.KUBE_CA_DATA != '' && secrets.KUBE_CA_DATA || vars.KUBE_CA_DATA }}
          KUBE_BEARER_TOKEN: ${{ secrets.KUBE_BEARER_TOKEN != '' && secrets.KUBE_BEARER_TOKEN || vars.KUBE_BEARER_TOKEN }}
        run: |
          set -e
          echo "üîß Configuring kubectl for Yandex Managed Kubernetes (Static Configuration)..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
          if [ -z "$KUBE_SERVER" ] || [ -z "$KUBE_CA_DATA" ] || [ -z "$KUBE_BEARER_TOKEN" ]; then
            echo "‚ùå –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!"
            echo "–¢—Ä–µ–±—É—é—Ç—Å—è: KUBE_SERVER, KUBE_CA_DATA, KUBE_BEARER_TOKEN"
            echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: ./packages/twenty-docker/k8s/get-github-secrets.sh"
            echo "Debug lengths: server=${#KUBE_SERVER} ca=${#KUBE_CA_DATA} token=${#KUBE_BEARER_TOKEN}"
            exit 1
          fi
          
          # –°–æ–∑–¥–∞–µ–º .kube –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          mkdir -p ~/.kube
          
          echo "üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ kubectl..."
          
          # –°–æ–∑–¥–∞–µ–º kubeconfig –∏—Å–ø–æ–ª—å–∑—É—è kubectl –∫–æ–º–∞–Ω–¥—ã
          kubectl config set-cluster yc-cluster --server="$KUBE_SERVER"
          kubectl config set clusters.yc-cluster.certificate-authority-data "$KUBE_CA_DATA"
          kubectl config set-credentials sa-user --token="$KUBE_BEARER_TOKEN"
          kubectl config set-context yc-context --cluster=yc-cluster --user=sa-user
          kubectl config use-context yc-context
          
          chmod 600 ~/.kube/config
          echo "‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è kubectl –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
          
          # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É..."
          if kubectl cluster-info --request-timeout=30s; then
            echo "‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É Kubernetes"
            echo "üåê –°–µ—Ä–≤–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞: $KUBE_SERVER"
          else
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É"
            echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–æ–≤: KUBE_SERVER, KUBE_CA_DATA, KUBE_BEARER_TOKEN"
            exit 1
          fi

      - name: Deploy to Kubernetes Production
        run: |
          cd packages/twenty-docker/k8s
          export DOCKER_REGISTRY_USER=${{ secrets.DOCKER_REGISTRY_USER }}
          export DOCKER_REGISTRY_TOKEN=${{ secrets.DOCKER_REGISTRY_TOKEN }}
          export IMAGE_TAG=${{ steps.meta.outputs.tags }}
          ./deploy.sh prod ${{ steps.meta.outputs.tags }}

      - name: Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 90
          for i in {1..15}; do
            if curl -f https://${{ env.DOMAIN }}/healthz; then
              echo "‚úÖ Production deployment successful!"
              exit 0
            fi
            echo "Waiting for health check... ($i/15)"
            sleep 30
          done
          echo "‚ùå Health check failed - rolling back"
          exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          cd packages/twenty-docker/k8s
          echo "Rolling back to previous version..."
          ./deploy.sh rollback prod

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Kubernetes Production deployment ${{ job.status }}!
            Environment: ${{ env.ENVIRONMENT }}
            Domain: https://${{ env.DOMAIN }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
