name: Deploy to Kubernetes Stage Environment

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: skillcrm-register.registry.twcstorage.ru
  DOCKER_IMAGE_NAME: twenty
  ENVIRONMENT: stage
  DOMAIN: stage.skillcrm.ru

jobs:
  build-and-deploy:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    environment: stage
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug Registry Info
        run: |
          echo "Registry: ${{ env.DOCKER_REGISTRY }}"
          echo "Username: ${{ secrets.DOCKER_REGISTRY_USER }}"
          echo "Token length: ${#DOCKER_REGISTRY_TOKEN}"
          echo "Token starts with: ${DOCKER_REGISTRY_TOKEN:0:20}..."
          echo "Available secrets:"
          env | grep -E "(DOCKER|REGISTRY)" | head -10

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=stage,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/twenty-docker/twenty/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            REACT_APP_SERVER_BASE_URL=https://${{ env.DOMAIN }}
            APP_VERSION=${{ github.sha }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          # Configure kubectl for your Kubernetes cluster
          # This step should be customized based on your cluster setup
          echo "KUBECONFIG=${{ secrets.KUBECONFIG }}" > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: Deploy to Kubernetes Stage
        run: |
          cd packages/twenty-docker/k8s
          export DOCKER_REGISTRY_USER=${{ secrets.DOCKER_REGISTRY_USER }}
          export DOCKER_REGISTRY_TOKEN=${{ secrets.DOCKER_REGISTRY_TOKEN }}
          # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ç–µ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | cut -d' ' -f1)
          export IMAGE_TAG
          ./deploy.sh stage "$IMAGE_TAG"

      - name: Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          for i in {1..10}; do
            if curl -f https://${{ env.DOMAIN }}/healthz; then
              echo "‚úÖ Stage deployment successful!"
              exit 0
            fi
            echo "Waiting for health check... ($i/10)"
            sleep 30
          done
          echo "‚ùå Health check failed"
          exit 1

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Kubernetes Stage deployment ${{ job.status }}!
            Environment: ${{ env.ENVIRONMENT }}
            Domain: https://${{ env.DOMAIN }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Telegram
        if: always()
        run: |
          # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ç–µ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | cut -d' ' -f1)
          
          # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
          if [ "${{ job.status }}" = "success" ]; then
            MESSAGE="üöÄ *–î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*
            
üåç *–û–∫—Ä—É–∂–µ–Ω–∏–µ:* ${{ env.ENVIRONMENT }}
üåê *–î–æ–º–µ–Ω:* https://${{ env.DOMAIN }}
üê≥ *–û–±—Ä–∞–∑:* \`$IMAGE_TAG\`
üìù *–ö–æ–º–º–∏—Ç:* \`${{ github.sha }}\`
üë§ *–ê–≤—Ç–æ—Ä:* ${{ github.actor }}
‚è∞ *–í—Ä–µ–º—è:* $(date '+%d.%m.%Y %H:%M:%S')
            
‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ"
          else
            MESSAGE="‚ùå *–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!*
            
üåç *–û–∫—Ä—É–∂–µ–Ω–∏–µ:* ${{ env.ENVIRONMENT }}
üåê *–î–æ–º–µ–Ω:* https://${{ env.DOMAIN }}
üê≥ *–û–±—Ä–∞–∑:* \`$IMAGE_TAG\`
üìù *–ö–æ–º–º–∏—Ç:* \`${{ github.sha }}\`
üë§ *–ê–≤—Ç–æ—Ä:* ${{ github.actor }}
‚è∞ *–í—Ä–µ–º—è:* $(date '+%d.%m.%Y %H:%M:%S')
            
‚ùå –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞"
          fi
          
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown" \
            -d disable_web_page_preview=true
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
