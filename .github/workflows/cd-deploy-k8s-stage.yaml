name: Deploy to Kubernetes Stage Environment

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: skillcrm-register.registry.twcstorage.ru
  DOCKER_IMAGE_NAME: twenty
  ENVIRONMENT: stage
  DOMAIN: stage.skillcrm.ru

concurrency:
  group: deploy-stage-develop
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-and-deploy:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    environment: stage
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        id: registry-login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Notify Telegram - Registry Login Failed
        if: failure() && steps.registry-login.outcome == 'failure'
        uses: ./.github/actions/telegram-notify
        with:
          status_emoji: "‚ùå"
          status_text: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Docker Registry"
          details: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ DOCKER_REGISTRY_USER –∏ DOCKER_REGISTRY_TOKEN"
          step_name: "Registry Login"
          image_tag: "unknown"
          environment: ${{ env.ENVIRONMENT }}
          domain: ${{ env.DOMAIN }}
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/twenty-docker/twenty/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            REACT_APP_SERVER_BASE_URL=https://${{ env.DOMAIN }}
            APP_VERSION=${{ github.sha }}

      - name: Notify Telegram - Docker Build Failed
        if: failure() && steps.build-push.outcome == 'failure'
        uses: ./.github/actions/telegram-notify
        with:
          status_emoji: "‚ùå"
          status_text: "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞"
          details: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Dockerfile –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
          step_name: "Docker Build"
          image_tag: "unknown"
          environment: ${{ env.ENVIRONMENT }}
          domain: ${{ env.DOMAIN }}
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.4'

      

      - name: Configure kubectl (Static Configuration)
        id: configure-kubectl
        env:
          KUBE_SERVER: ${{ secrets.KUBE_SERVER }}
          KUBE_CA_DATA: ${{ secrets.KUBE_CA_DATA }}
          KUBE_BEARER_TOKEN: ${{ secrets.KUBE_BEARER_TOKEN }}
        run: |
          set -e
          echo "üîß Configuring kubectl for Yandex Managed Kubernetes (Static Configuration)..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
          if [ -z "$KUBE_SERVER" ] || [ -z "$KUBE_CA_DATA" ] || [ -z "$KUBE_BEARER_TOKEN" ]; then
            echo "‚ùå –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!"
            echo "–¢—Ä–µ–±—É—é—Ç—Å—è: KUBE_SERVER, KUBE_CA_DATA, KUBE_BEARER_TOKEN"
            echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: ./packages/twenty-docker/k8s/get-github-secrets.sh"
            exit 1
          fi
          
          # –°–æ–∑–¥–∞–µ–º .kube –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          mkdir -p ~/.kube
          
          echo "üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ kubectl..."
          
          # –°–æ–∑–¥–∞–µ–º kubeconfig –∏—Å–ø–æ–ª—å–∑—É—è kubectl –∫–æ–º–∞–Ω–¥—ã
          kubectl config set-cluster yc-cluster --server="$KUBE_SERVER"
          kubectl config set clusters.yc-cluster.certificate-authority-data "$KUBE_CA_DATA"
          kubectl config set-credentials sa-user --token="$KUBE_BEARER_TOKEN"
          kubectl config set-context yc-context --cluster=yc-cluster --user=sa-user
          kubectl config use-context yc-context
          
          chmod 600 ~/.kube/config
          echo "‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è kubectl –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
          
          # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É..."
          if kubectl cluster-info --request-timeout=30s; then
            echo "‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É Kubernetes"
            echo "üåê –°–µ—Ä–≤–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞: $KUBE_SERVER"
          else
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É"
            echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–æ–≤: KUBE_SERVER, KUBE_CA_DATA, KUBE_BEARER_TOKEN"
            exit 1
          fi

      - name: Notify Telegram - kubectl Configuration Failed
        if: failure() && steps.configure-kubectl.outcome == 'failure'
        uses: ./.github/actions/telegram-notify
        with:
          status_emoji: "‚ùå"
          status_text: "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ kubectl"
          details: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ KUBECONFIG —Å–µ–∫—Ä–µ—Ç –∏ –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∞—Å—Ç–µ—Ä—É"
          step_name: "kubectl Configuration"
          image_tag: "unknown"
          environment: ${{ env.ENVIRONMENT }}
          domain: ${{ env.DOMAIN }}
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Deploy to Kubernetes Stage
        id: deploy-k8s
        run: |
          cd packages/twenty-docker/k8s
          export DOCKER_REGISTRY_USER=${{ secrets.DOCKER_REGISTRY_USER }}
          export DOCKER_REGISTRY_TOKEN=${{ secrets.DOCKER_REGISTRY_TOKEN }}
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' | grep -E ':[0-9a-f]{7,}$' | head -1 || true)
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | awk '{print $1}')
          fi
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "Deploying with image: $IMAGE_TAG"
          ./deploy.sh stage "$IMAGE_TAG"

      - name: Notify Telegram - Kubernetes Deployment Failed
        if: failure() && steps.deploy-k8s.outcome == 'failure'
        uses: ./.github/actions/telegram-notify
        with:
          status_emoji: "‚ùå"
          status_text: "–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Kubernetes"
          details: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã Kubernetes –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
          step_name: "Kubernetes Deployment"
          image_tag: ${{ steps.deploy-k8s.outputs.image_tag }}
          environment: ${{ env.ENVIRONMENT }}
          domain: ${{ env.DOMAIN }}
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Health Check
        id: health-check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          for i in {1..15}; do
            if curl -fsS --connect-timeout 10 --max-time 15 https://${{ env.DOMAIN }}/healthz; then
              echo "‚úÖ Stage deployment successful!"
              exit 0
            fi
            echo "Waiting for health check... ($i/15)"
            sleep 20
          done
          echo "‚ùå Health check failed"
          exit 1

      - name: Notify Telegram - Health Check Failed
        if: failure() && steps.health-check.outcome == 'failure'
        uses: ./.github/actions/telegram-notify
        with:
          status_emoji: "‚ùå"
          status_text: "Health Check –Ω–µ –ø—Ä–æ—à–µ–ª"
          details: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check"
          step_name: "Health Check"
          image_tag: ${{ steps.deploy-k8s.outputs.image_tag }}
          environment: ${{ env.ENVIRONMENT }}
          domain: ${{ env.DOMAIN }}
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Notify Telegram - Final Status
        if: always()
        uses: ./.github/actions/telegram-notify
        with:
          status_emoji: ${{ job.status == 'success' && 'üöÄ' || '‚ùå' }}
          status_text: ${{ job.status == 'success' && '–î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω' || '–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π' }}
          details: ${{ job.status == 'success' && '–í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ' || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π' }}
          step_name: "Final Status"
          image_tag: ${{ steps.deploy-k8s.outputs.image_tag }}
          environment: ${{ env.ENVIRONMENT }}
          domain: ${{ env.DOMAIN }}
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
